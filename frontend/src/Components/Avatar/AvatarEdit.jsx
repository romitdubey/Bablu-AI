/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx public/models/avatargirl.glb 
*/

import React, { useEffect, useMemo, useRef, useState } from 'react'
import { useGraph } from '@react-three/fiber'
import { useAnimations, useFBX, useGLTF } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { useControls } from 'leva'

export function AvatarEdit(props) {

  // const {
  //   playAudio,
  //   script
  // } = useControls({
  //   playAudio: false,
  //   headFollow: true,
  //   smoothMorphTarget: true,
  //   morphTargetSmoothing: 0.5,
  //   // script: {
  //   //   value: "welcome",
  //   //   // options: ["welcome", "pizzas"],
  //   // }
  // });

  const group = useRef()
  const { scene } = useGLTF('models/avatargirl.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)

  // const [playAudio, setPlayAudio] = useState(true)
  const audio = useMemo(() => new Audio('/frontend/public/audios/welcome.mp3'));
  useEffect(() => {

    console.log(audio)
    // if (playAudio) {
      audio.play()
      // setPlayAudio(false)
    // }else {
      // audio.pause()
    // }
    
  }, [ ])


  const { animations: sittingAnimation } = useFBX('animations/Sitting.fbx')
  //   console.log(idleAnimation)
  sittingAnimation[0].name = 'Sitting';
  const { actions } = useAnimations(sittingAnimation, group)

  useEffect(() => {
    actions['Sitting'].reset().play()
  }, [])
  return (
    <group {...props} ref={group} dispose={null}>
      <primitive object={nodes.Hips} />
      <skinnedMesh name="Wolf3D_Avatar" geometry={nodes.Wolf3D_Avatar.geometry} material={materials.Wolf3D_Avatar} skeleton={nodes.Wolf3D_Avatar.skeleton} morphTargetDictionary={nodes.Wolf3D_Avatar.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Avatar.morphTargetInfluences} />

    </group>
  )
}

useGLTF.preload('models/avatargirl.glb')
